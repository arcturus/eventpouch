'use strict';

var PouchDB = require('pouchdb');
var getUUID = require('./utils/uuid.js');
var evenpouch_env = require('./eventpouch_env.js');

var Configurator = function Configurator(configObj, cb) {
  // Fetch known keys from config object
  // TODO: Add not just defaults, but regexp to check validity
  var DEFAULTS = {
    'remoteSyncHost': null,
    'syncAfter': 10,
    'appVersion': null,
    'db': 'configuration',
    'dbConfigKey': 'configuration',
    '_id': 'configuration'
  };
  var config = {};
  configObj = configObj || {};
  Object.keys(DEFAULTS).forEach(function onParam(param) {
    config[param] = configObj[param] || DEFAULTS[param];
  });

  var configDB = null;

  // Goes to DB and tries to fetch previous loaded configuration.
  // Some of the config options will be autogenerated first time
  // this runs on the client.
  function loadConfiguration (cb) {
    configDB = new PouchDB(config.db);
    configDB.get(config.dbConfigKey, function(err, cfg) {
      if (err || !cfg) {
        // We don't have a configuration stored
        // create a new one and save it
        config.uuid = getUUID();
        if (!config.appVersion) {
          evenpouch_env.getAppVersion(function onVersion(v) {
            config.appVersion = v;
            saveConfig(cb);
          });
        } else {
          saveConfig(cb);
        }
      } else {
        var needUpdate = false;
        Object.keys(cfg).forEach(function onKey(k) {
          if (config[k] !== undefined) {
            return;
          }
          config[k] = cfg[k];
          needUpdate = true;
        });
        if (needUpdate) {
          saveConfig(cb);
        } else {
          cb(config);
        }
      }
    });
  }

  // Stores current config into current opened DB
  function saveConfig(cb) {
    configDB.put(config, function(err, response) {
      cb(config);
    });
  }

  // Load the config params from DB
  loadConfiguration(cb);

};

module.exports = Configurator;
